# -*- coding: utf-8 -*-
"""19th December Stats.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JBuciJ_kLII2vCTrLE27wHrVl1cpgMVj

**1. Check the normalcy of all numerical columns of the dataset?**
"""

import pandas as pd
import numpy as np

df = pd.read_csv('diabetes.csv')
df

df.head()

from scipy.stats import shapiro
stats , p = shapiro(df["Pregnancies"])
print (" test stats is :" , stats)
print(" p-value:" , p)

if p>0.05:
   print(" data is normally distibuted")
else:
    print(" data is not normally distributed")

from scipy.stats import shapiro
stats , p = shapiro(df["Glucose"])
print (" test stats is :" , stats)
print(" p-value:" , p)

if p>0.05:
   print(" data is normally distibuted")
else:
    print(" data is not normally distributed")

from scipy.stats import shapiro
stats , p = shapiro(df["BloodPressure"])
print (" test stats is :" , stats)
print(" p-value:" , p)

if p>0.05:
   print(" data is normally distibuted")
else:
    print(" data is not normally distributed")

from scipy.stats import shapiro
stats , p = shapiro(df["SkinThickness"])
print (" test stats is :" , stats)
print(" p-value:" , p)

if p>0.05:
   print(" data is normally distibuted")
else:
    print(" data is not normally distributed")

from scipy.stats import shapiro
stats , p = shapiro(df["Insulin"])
print (" test stats is :" , stats)
print(" p-value:" , p)

if p>0.05:
   print(" data is normally distibuted")
else:
    print(" data is not normally distributed")

from scipy.stats import shapiro
stats , p = shapiro(df["BMI"])
print (" test stats is :" , stats)
print(" p-value:" , p)

if p>0.05:
   print(" data is normally distibuted")
else:
    print(" data is not normally distributed")

from scipy.stats import shapiro
stats , p = shapiro(df["DiabetesPedigreeFunction"])
print (" test stats is :" , stats)
print(" p-value:" , p)

if p>0.05:
   print(" data is normally distibuted")
else:
    print(" data is not normally distributed")

from scipy.stats import shapiro
stats , p = shapiro(df["Age"])
print (" test stats is :" , stats)
print(" p-value:" , p)

if p>0.05:
   print(" data is normally distibuted")
else:
    print(" data is not normally distributed")

from scipy.stats import shapiro
stats , p = shapiro(df["Outcome"])
print (" test stats is :" , stats)
print(" p-value:" , p)

if p>0.05:
   print(" data is normally distibuted")
else:
    print(" data is not normally distributed")

"""**2. Find correlation of all numeric columns with respect to daibetes pedigry functions?**"""

spear_corr = df['DiabetesPedigreeFunction'].corr(df['Pregnancies'], method='spearman')
spear_corr

spear_corr = df['DiabetesPedigreeFunction'].corr(df['Glucose'], method='spearman')
spear_corr

spear_corr = df['DiabetesPedigreeFunction'].corr(df['BloodPressure'], method='spearman')
spear_corr

spear_corr = df['DiabetesPedigreeFunction'].corr(df['SkinThickness'], method='spearman')
spear_corr

spear_corr = df['DiabetesPedigreeFunction'].corr(df['Insulin'], method='spearman')
spear_corr

spear_corr = df['DiabetesPedigreeFunction'].corr(df['BMI'], method='spearman')
spear_corr

spear_corr = df['DiabetesPedigreeFunction'].corr(df['Age'], method='spearman')
spear_corr

spear_corr = df['DiabetesPedigreeFunction'].corr(df['Outcome'], method='spearman')
spear_corr

"""**3. Choose one column which has highest correlation with daibetes pedigry function and apply regression in order to predict the output value for a user input value?**"""

n = len(df)
n

xy = df["Insulin"] * df["DiabetesPedigreeFunction"]
xy

sum_xy = xy.sum()
sum_xy

nxy = n * sum_xy
nxy

sum_X = df["Insulin"].sum()
sum_X

sum_y = df["DiabetesPedigreeFunction"].sum()
sum_y

sum_sumx_sumy = sum_X * sum_y
sum_sumx_sumy

x2 = df["Insulin"] * df["Insulin"]
x2

sum_x2 = x2.sum()
sum_x2

square_sumx = sum_X * sum_X
square_sumx

slope = (nxy - sum_sumx_sumy) / (n * sum_x2 - square_sumx)
slope

intercept = (sum_y - slope * sum_X) / n
intercept

y = slope * 94 + intercept
y