# -*- coding: utf-8 -*-
"""Statistical Approaches Assignment - II.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bio0duPI9offI1VuWevg5ADJlJwVDg4O
"""

import pandas as pd
import numpy as np

df = pd.read_csv("IRIS.csv")
df

sub_df = df[["sepal_length","sepal_width","petal_length","petal_width","species"]]
sub_df.head()

"""Q1. **Central Tendency**
Without directly calculating the mean, determine which sepal measurement (sepal_length or
sepal_width) has a higher average by observing the dataset.


Explanation = **The median of sepal_length is higher than sepal_width, which indicates that sepal_length has a higher average.**
"""

sub_df.describe()

"""Q2. **Dispersion**
Compare the variability of petal measurements by checking the difference between the
ranges of petal_length and petal_width. Which feature shows more spread?

Explanation = **Petal_length shows more spread in its measurements, with a larger range**
"""

#range of petal_length
r1 = sub_df['petal_length'].max() - sub_df['petal_length'].min()
r1

#range of petal_width
r2 = sub_df['petal_width'].max() - sub_df['petal_width'].min()
r2

"""Q3. **Quartiles**
Identify which feature, sepal_length or sepal_width, has a higher interquartile range (IQR),
indicating greater variability in the middle 50% of the data.

Explanation = **Sepal_length has a higher IQR compared to Sepal_width. This indicates that Sepal_length has greater variability in the middle 50% of the data**
"""

#IQR of sepal_length
IQR1 = sub_df['sepal_length'].quantile(0.75) - sub_df['sepal_length'].quantile(0.25)
IQR1

#IQR of sepal_width
IQR2= sub_df['sepal_width'].quantile(0.75) - sub_df['sepal_width'].quantile(0.25)
IQR2

"""Q4. **Standard Deviation Insight**
Based on the computed standard deviations of sepal_length and sepal_width, determine
which attribute exhibits more variability and discuss what this indicates about the
consistency of the two features.

Explanation = **Sepal_length has a higher standard deviation compared to Sepal_width which indicates that Sepal_length exhibits more absolute variability. The feature with lower variability is more consistent and the feature with higher variability may be more influenced**
"""

#Standard Deviation of sepal_length
sd1 = sub_df["sepal_length"].std()
sd1

#Standard Deviation of sepal_width
sd2 = sub_df["sepal_width"].std()
sd2

"""Q5. **Shape of Distribution**
Without plotting, assess whether the petal_length distribution is skewed. Use a descriptive
statistic that measures skewness and infer the distribution shape.

Explanation = **The data of petal_length is left skewed because mean of petal length is less than the median**
"""

#Mean
mean= sub_df["petal_length"].mean()
mean

#Median
median= sub_df["petal_length"].median()
median

#Skew
skew = sub_df["petal_length"].skew()
skew

"""Q6. **Symmetry**
For which attribute, sepal_length or sepal_width, is the skewness closer to zero? What does
this imply about the symmetry of its distribution?

Explanation = **Sepal_length skewness is closer to zero, Sepal_length distribution is more symmetric**
"""

#Mean of sepal_length
mean_l=sub_df["sepal_length"].mean()
mean_l

#Median of sepal_length
median_l=sub_df["sepal_length"].median()
median_l

#Skew
skew_l = sub_df["sepal_length"].skew()
skew_l

#Mean of sepal_width
mean_w=sub_df["sepal_width"].mean()
mean_w

#Median of sepal_width
median_w=sub_df["sepal_width"].median()
median_w

#Skew
skew_w=sub_df["sepal_width"].skew()
skew_w

"""Q7. **Coefficient of Variation**
Calculate the coefficient of variation (CV) for sepal_length and petal_length. Which feature
has greater relative variability, and what does this tell you about the dataset?

Explanation = **A higher CV indicates greater disparity or variation in the data set**
"""

mean_sl = sub_df["sepal_length"].mean()
mean_sl

sd_sl = sub_df["sepal_length"].std()
sd_sl

cv_sl = sub_df["sepal_length"].std() / sub_df["sepal_length"].mean() * 100

mean_pl = sub_df["petal_length"].mean()
mean_pl

sd_pl = sub_df["petal_length"].std()
sd_pl

cv_pl = sub_df["petal_length"].std() / sub_df["petal_length"].mean() * 100

"""Q8. **Outlier Detection using IQR**
Identify the outliers in the sepal_length feature using the IQR method (define outliers as
values that fall below Q1 - 1.5 * IQR or above Q3 + 1.5 * IQR). How many outliers are
present?

Explanation = **there is no outliers**
"""

#Outliers of sepal_length
lower_bound = sub_df['sepal_length'].quantile(0.25) - 1.5 * IQR1
lower_bound

upper_bound = sub_df['sepal_length'].quantile(0.75) + 1.5 * IQR1
upper_bound

outliers = sub_df[(sub_df['sepal_length'] < lower_bound) | (sub_df['sepal_length'] > upper_bound)]
print("Outliers Rows:")
print(outliers)